var fs = require('fs');
var pathUtil = require('path');
var appFolder = process.cwd() + pathUtil.sep + 'config' + pathUtil.sep + 'apps';

function parsePage (path) {
  var page = JSON.parse(fs.readFileSync(path).toString());
  page.path = pathUtil.basename(path);
  return page;
}

var init = function(appId) {
  var pagesFolder = appFolder + pathUtil.sep + appId + pathUtil.sep + 'pages';
  if (fs.existsSync(pagesFolder)) { 
    return; 
  }
  fs.mkdirSync(pagesFolder);
}

var fill = function(folder, pages) {
  var dirList = fs.readdirSync(folder);
  dirList.forEach(function(item) {
      if (fs.statSync(folder + pathUtil.sep + item).isDirectory()) {
          fill(folder + pathUtil.sep + item, pages);
      } else {
          pages.push(parsePage(folder + pathUtil.sep + item));
      }
  });
};

exports.fill = function(appId, pages) {
  var pagesFolder = appFolder + pathUtil.sep + appId + pathUtil.sep + 'pages';
  init(appId);
  fill(pagesFolder, pages);
}
exports.write = function(appId, page) {
  var pagesFolder = appFolder + pathUtil.sep + appId + pathUtil.sep + 'pages';
  fs.writeFileSync(pagesFolder + pathUtil.sep +page.path, JSON.stringify(page));
}
exports.remove = function(appId, page) {
  var pagesFolder = appFolder + pathUtil.sep + appId + pathUtil.sep + 'pages';
  fs.unlink(pagesFolder + pathUtil.sep +page.path);
}
